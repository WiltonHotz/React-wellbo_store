{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBQdLF4hs5eI0W2Orc_fpe--BKpLhf-2uQ\",\n  authDomain: \"wellbo-store-db.firebaseapp.com\",\n  databaseURL: \"https://wellbo-store-db.firebaseio.com\",\n  projectId: \"wellbo-store-db\",\n  storageBucket: \"wellbo-store-db.appspot.com\",\n  messagingSenderId: \"1091944781450\",\n  appId: \"1:1091944781450:web:c93f90cc8588c439eabf73\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // use ref documentRef for CRUD\n\n  const collectionRef = firestore.collection('users');\n  console.log('collection ref: ' + collectionRef);\n  const collectionSnapshot = await collectionRef.get();\n  console.log('snapshot data: ' + collectionSnapshot);\n  const snapShot = await userRef.get(); // call snapShot.data() to get object\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/vikto/Desktop/React/wellbo-store/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","collectionRef","collection","console","log","collectionSnapshot","get","snapShot","exists","displayName","email","createdAt","Date","set","error","message","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AACA,OAAO,oBAAP;AACA,OAAO,eAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAE,yCADK;AAEbC,EAAAA,UAAU,EAAE,iCAFC;AAGbC,EAAAA,WAAW,EAAE,wCAHA;AAIbC,EAAAA,SAAS,EAAE,iBAJE;AAKbC,EAAAA,aAAa,EAAE,6BALF;AAMbC,EAAAA,iBAAiB,EAAE,eANN;AAObC,EAAAA,KAAK,EAAE;AAPM,CAAf;AAUA,OAAO,MAAMC,yBAAyB,GAAG,OAAOC,QAAP,EAAiBC,cAAjB,KAAoC;AAC3E,MAAG,CAACD,QAAJ,EAAc;AAEd,QAAME,OAAO,GAAGC,SAAS,CAACC,GAAV,CAAe,SAAQJ,QAAQ,CAACK,GAAI,EAApC,CAAhB,CAH2E,CAGpB;;AAEvD,QAAMC,aAAa,GAAGH,SAAS,CAACI,UAAV,CAAqB,OAArB,CAAtB;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAqBH,aAAjC;AAEA,QAAMI,kBAAkB,GAAG,MAAMJ,aAAa,CAACK,GAAd,EAAjC;AAEAH,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAoBC,kBAAhC;AAEA,QAAME,QAAQ,GAAG,MAAMV,OAAO,CAACS,GAAR,EAAvB,CAb2E,CAatC;;AAErC,MAAG,CAACC,QAAQ,CAACC,MAAb,EAAqB;AACnB,UAAM;AAAEC,MAAAA,WAAF;AAAeC,MAAAA;AAAf,QAAyBf,QAA/B;AACA,UAAMgB,SAAS,GAAG,IAAIC,IAAJ,EAAlB;;AAEA,QAAI;AACF,YAAMf,OAAO,CAACgB,GAAR,CAAY;AAChBJ,QAAAA,WADgB;AAEhBC,QAAAA,KAFgB;AAGhBC,QAAAA,SAHgB;AAIhB,WAAGf;AAJa,OAAZ,CAAN;AAMD,KAPD,CAOE,OAAMkB,KAAN,EAAa;AACbX,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCU,KAAK,CAACC,OAAzC;AACD;AACF;;AAED,SAAOlB,OAAP;AACD,CAhCM;AAkCPZ,QAAQ,CAAC+B,aAAT,CAAuB9B,MAAvB;AAEA,OAAO,MAAM+B,IAAI,GAAGhC,QAAQ,CAACgC,IAAT,EAAb;AACP,OAAO,MAAMnB,SAAS,GAAGb,QAAQ,CAACa,SAAT,EAAlB;AAEP,MAAMoB,QAAQ,GAAG,IAAIjC,QAAQ,CAACgC,IAAT,CAAcE,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAAEC,EAAAA,MAAM,EAAE;AAAV,CAA7B;AACA,OAAO,MAAMC,gBAAgB,GAAG,MAAML,IAAI,CAACM,eAAL,CAAqBL,QAArB,CAA/B;AAEP,eAAejC,QAAf","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBQdLF4hs5eI0W2Orc_fpe--BKpLhf-2uQ\",\r\n  authDomain: \"wellbo-store-db.firebaseapp.com\",\r\n  databaseURL: \"https://wellbo-store-db.firebaseio.com\",\r\n  projectId: \"wellbo-store-db\",\r\n  storageBucket: \"wellbo-store-db.appspot.com\",\r\n  messagingSenderId: \"1091944781450\",\r\n  appId: \"1:1091944781450:web:c93f90cc8588c439eabf73\"\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if(!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`) // use ref documentRef for CRUD\r\n\r\n  const collectionRef = firestore.collection('users')\r\n\r\n  console.log('collection ref: ' + collectionRef)\r\n\r\n  const collectionSnapshot = await collectionRef.get()\r\n\r\n  console.log('snapshot data: ' + collectionSnapshot)\r\n\r\n  const snapShot = await userRef.get() // call snapShot.data() to get object\r\n  \r\n  if(!snapShot.exists) {\r\n    const { displayName, email } = userAuth\r\n    const createdAt = new Date()\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      })\r\n    } catch(error) {\r\n      console.log('error creating user', error.message)\r\n    }\r\n  }\r\n\r\n  return userRef\r\n}\r\n\r\nfirebase.initializeApp(config)\r\n\r\nexport const auth = firebase.auth()\r\nexport const firestore = firebase.firestore()\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\nprovider.setCustomParameters({ prompt: 'select_account'})\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\r\n\r\nexport default firebase"]},"metadata":{},"sourceType":"module"}