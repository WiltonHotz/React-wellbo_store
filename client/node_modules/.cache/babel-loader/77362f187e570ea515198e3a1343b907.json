{"ast":null,"code":"import firebase from 'firebase/app';\nimport 'firebase/firestore';\nimport 'firebase/auth';\nconst config = {\n  apiKey: \"AIzaSyBQdLF4hs5eI0W2Orc_fpe--BKpLhf-2uQ\",\n  authDomain: \"wellbo-store-db.firebaseapp.com\",\n  databaseURL: \"https://wellbo-store-db.firebaseio.com\",\n  projectId: \"wellbo-store-db\",\n  storageBucket: \"wellbo-store-db.appspot.com\",\n  messagingSenderId: \"1091944781450\",\n  appId: \"1:1091944781450:web:c93f90cc8588c439eabf73\"\n};\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\n  if (!userAuth) return;\n  const userRef = firestore.doc(`users/${userAuth.uid}`); // use ref documentRef for CRUD\n\n  const snapShot = await userRef.get(); // call snapShot.data() to get object\n\n  if (!snapShot.exists) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n\n    try {\n      await userRef.set({\n        displayName,\n        email,\n        createdAt,\n        ...additionalData\n      });\n    } catch (error) {\n      console.log('error creating user', error.message);\n    }\n  }\n\n  return userRef;\n};\nexport const convertCollectionsSnapshotToMap = collections => {\n  const transformedCollection = collections.docs.map(doc => {\n    const {\n      title,\n      items\n    } = doc.data();\n    return {\n      routeName: encodeURI(title.toLowerCase()),\n      id: doc.id,\n      title,\n      items\n    };\n  });\n  console.log(transformedCollection);\n};\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\n  const collectionRef = firestore.collection(collectionKey);\n  console.log(collectionRef);\n  const batch = firestore.batch(); // batch all data so we can fail all or accept all.\n\n  objectsToAdd.forEach(obj => {\n    const newDocRef = collectionRef.doc();\n    batch.set(newDocRef, obj);\n  });\n  return await batch.commit(); // just do this once to add our collection data to firebase. See app.js for commented out code\n};\nfirebase.initializeApp(config);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: 'select_account'\n});\nexport const signInWithGoogle = () => auth.signInWithPopup(provider);\nexport default firebase;","map":{"version":3,"sources":["C:/Users/vikto/Desktop/React/wellbo-store/src/firebase/firebase.utils.js"],"names":["firebase","config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","createUserProfileDocument","userAuth","additionalData","userRef","firestore","doc","uid","snapShot","get","exists","displayName","email","createdAt","Date","set","error","console","log","message","convertCollectionsSnapshotToMap","collections","transformedCollection","docs","map","title","items","data","routeName","encodeURI","toLowerCase","id","addCollectionAndDocuments","collectionKey","objectsToAdd","collectionRef","collection","batch","forEach","obj","newDocRef","commit","initializeApp","auth","provider","GoogleAuthProvider","setCustomParameters","prompt","signInWithGoogle","signInWithPopup"],"mappings":"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","sourcesContent":["import firebase from 'firebase/app'\r\nimport 'firebase/firestore'\r\nimport 'firebase/auth'\r\n\r\nconst config = {\r\n  apiKey: \"AIzaSyBQdLF4hs5eI0W2Orc_fpe--BKpLhf-2uQ\",\r\n  authDomain: \"wellbo-store-db.firebaseapp.com\",\r\n  databaseURL: \"https://wellbo-store-db.firebaseio.com\",\r\n  projectId: \"wellbo-store-db\",\r\n  storageBucket: \"wellbo-store-db.appspot.com\",\r\n  messagingSenderId: \"1091944781450\",\r\n  appId: \"1:1091944781450:web:c93f90cc8588c439eabf73\"\r\n};\r\n\r\nexport const createUserProfileDocument = async (userAuth, additionalData) => {\r\n  if(!userAuth) return;\r\n\r\n  const userRef = firestore.doc(`users/${userAuth.uid}`) // use ref documentRef for CRUD\r\n\r\n  const snapShot = await userRef.get() // call snapShot.data() to get object\r\n  \r\n  if(!snapShot.exists) {\r\n    const { displayName, email } = userAuth\r\n    const createdAt = new Date()\r\n\r\n    try {\r\n      await userRef.set({\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalData\r\n      })\r\n    } catch(error) {\r\n      console.log('error creating user', error.message)\r\n    }\r\n  }\r\n\r\n  return userRef\r\n}\r\n\r\nexport const convertCollectionsSnapshotToMap = (collections) => {\r\n  const transformedCollection = collections.docs.map(doc => {\r\n    const { title, items } = doc.data()\r\n\r\n    return {\r\n      routeName: encodeURI(title.toLowerCase()),\r\n      id: doc.id,\r\n      title,\r\n      items\r\n    }\r\n  })\r\n\r\n  console.log(transformedCollection)\r\n}\r\n\r\nexport const addCollectionAndDocuments = async (collectionKey, objectsToAdd) => {\r\n  const collectionRef = firestore.collection(collectionKey)\r\n  console.log(collectionRef)\r\n\r\n  const batch = firestore.batch() // batch all data so we can fail all or accept all.\r\n  objectsToAdd.forEach(obj => {\r\n    const newDocRef = collectionRef.doc()\r\n    batch.set(newDocRef, obj)\r\n  })\r\n\r\n  return await batch.commit() // just do this once to add our collection data to firebase. See app.js for commented out code\r\n}\r\n\r\nfirebase.initializeApp(config)\r\n\r\nexport const auth = firebase.auth()\r\nexport const firestore = firebase.firestore()\r\n\r\nconst provider = new firebase.auth.GoogleAuthProvider()\r\nprovider.setCustomParameters({ prompt: 'select_account'})\r\nexport const signInWithGoogle = () => auth.signInWithPopup(provider)\r\n\r\nexport default firebase"]},"metadata":{},"sourceType":"module"}